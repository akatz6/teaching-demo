 Ice breaker
    Name and useless superpower you want
    My name is Aaron and I want the ability to raise or lower the 
    temperature of a room by two degrees

Lesson
    Flex box in css and if time grid system. 
    I always prepare extra just in case.
    The finished lecture is on my github at https://github.com/akatz6/teaching-demo
    My teaching style is that I am going to show you a bunch or example that you can 
    use as a reference.

Set up
    Use ! to start html boilerplate code
    In header type 'link' and select the one with the css option
    #container will create a div with an id of container
    .item*3 will create three divs with class of item
    Remember id's are for individual elements and classes are for groups
    Command D to select multiple elements that are the same
    Lorem2 with create Lorem text with two words
    Live Server is an extension on VS code to auto update the browser
    Command and space on Chrome and select inspect to give open developer tools

Sources
    Flex: https://css-tricks.com/snippets/css/a-guide-to-flexbox/  
    Grid: https://css-tricks.com/snippets/css/complete-guide-grid/

Flex box.
    I looooooooooove using flex box. 
    So far we have covered display:block and display:inline-block for 
    the children elements to display elements on the same row. We also covered
    using margin to put some space between the elements, but what looks good
    on a big screen looks funky on a phone.

    In developer tools you can play around with different sizes of screens.
    If you put a margin-left of 50px it might look good in one size but not
    great in another. On solution is to use '%' instead of 'px' but this 
    leads to a guessing game. There is a better way and that is flex box.

    Let's change the parent div from display:block to display:flex.
    What do you notice?

    First let's play around with flex-direction. In order to see the differences we need to make the
    blocks different colors. So let's see our options.

    Now we play around with flex-direction and my favorite flew-wrap.

    We can do some really cool stuff with spacing using flex box. 
    Justify-content: controls spacing along the x axis
    
    Align-items: controls spacing along the y axis. In order to see the change
    we need to make the container height larger than the children.

    Gap: is a fun on because it gives you great control for spacing between the items

    Flex-grow: if you want a child to be larger than the others

    Align-self: This is if you want to change a specific child

Questions for you:
    Feel free to use the google to answer
    1) What makes flex box so awesome?
    2) Why is flex-wrap so amazing?
    3) Why is using Gap so much fun?
    4) What is your favorite justify-content option and why?

Grid:
    We are probably not going to have time to finish this, so I am writing out 
    step by step examples to explain the grid system.

    Grid is an extension of Flex. Where Flex deals with one line, 
    Grid is for two-dimensional layouts. It makes layouts so much easier
    and they are responsive to the size of the screen.

    #grid and press enter to create a parent div with an id of grid.
    Then in the parent div type .grids*4. This will create 4 child divs with 
    a class of grids. For each div create an id of item-<letter> (item-a, item-b, etc).

    Now the fun part. Go into our css file and for id of grid.
    The display is going to be grid because that is what we are learning about.
    I like to add a margin-top to create some space between the examples.
    For columns we are going to create 4 of them. The first two repeat and are 1fr
    which is a unit of space. Then the next one is 3fr and the final is 1 fr.
    fr is for Fractional Units.
    So we are going to add grid-template-columns: repeat(2, 1fr) 3fr 1fr;
    The rows we are going to hard code in three px values.
    For rows it is grid-template-rows: 50px 200px 50px;
    
    We can place each item in the grid based on the number of rows and columns we want
    the element to cover. The grid always starts at 1 for row and 1 for column and end
    at one more than the rows or columns. For example if you have three rows and you
    want a element to cover all the rows you would start at 1 and got to 4 (3 columns plus
    one space) 

    We are going to use grid-column and grid-row.
    In this case we have three rows and four columns.
    So for item-a we are going to use grid-column: 1/5.
    So see this we are going to need to add a background-color: red;
    We don't need grid-row because it is the first element in the first row.

    Now we have a simple layout.  Much easier and then using tables or using pixels.
    Also, notice how the layout looks good in all screen sizes.

    Questions for you:
    Again feel free to use the google to answer
    1) What makes the grid so awesome?
    2) What happens if you change the fr from 1 to 5?
    3) Can you use gap for grid, what options are for gap in grid?
    4) How much easier did I just make using css?

    Feel free to play around with these examples and look at the
    link I sent you. I use those all the time.

    Happy coding.

